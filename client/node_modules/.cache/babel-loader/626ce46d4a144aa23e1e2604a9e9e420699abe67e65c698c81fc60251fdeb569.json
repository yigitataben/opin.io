{"ast":null,"code":"import PostView from \"@/views/PostView.vue\";\nimport { ref, onMounted } from \"vue\";\nimport axios from \"axios\";\nexport default {\n  __name: 'ContentView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const posts = ref([]);\n    const fetchDataFromDatabase = async () => {\n      try {\n        const response = await axios.get(\"http://127.0.0.1:8080/post\");\n        posts.value = response.data;\n      } catch (error) {\n        console.error(\"Error fetching data from the database:\", error);\n      }\n    };\n    const formatDate = dateString => {\n      if (!dateString) return \"Invalid Date\";\n      const date = new Date(dateString);\n      if (isNaN(date.getTime())) return \"Invalid Date\";\n      const options = {\n        year: \"numeric\",\n        month: \"long\",\n        day: \"numeric\",\n        hour: \"numeric\",\n        minute: \"numeric\",\n        second: \"numeric\"\n      };\n      return date.toLocaleDateString('en-US', options);\n    };\n    onMounted(() => {\n      fetchDataFromDatabase().then(() => {\n        // posts dizisini created_at özelliğine göre sırala\n        posts.value.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n      });\n    });\n    const __returned__ = {\n      posts,\n      fetchDataFromDatabase,\n      formatDate,\n      PostView,\n      ref,\n      onMounted,\n      get axios() {\n        return axios;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["PostView","ref","onMounted","axios","posts","fetchDataFromDatabase","response","get","value","data","error","console","formatDate","dateString","date","Date","isNaN","getTime","options","year","month","day","hour","minute","second","toLocaleDateString","then","sort","a","b","created_at"],"sources":["C:/Users/yigit/OneDrive/Workspace/opin.io/client/src/views/ContentView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <PostView></PostView>\r\n    <v-container>\r\n        <v-col v-for=\"(post, index) in posts\" :key=\"index\">\r\n          <v-card class=\"mx-auto\" max-width=\"auto\" variant=\"elevated\">\r\n            <v-card-item>\r\n              <div>\r\n                <div class=\"text-overline mb-1\">@{{ post.user_name }}</div>\r\n                <div class=\"text-h6 mb-1\">{{ post.category_name }}</div>\r\n                <div class=\"text-caption\">{{ post.content }}</div>\r\n                <div class=\"text-overline mb-1\">{{ formatDate(post.created_at) }}</div>\r\n              </div>\r\n            </v-card-item>\r\n\r\n            <v-card-actions>\r\n              <v-spacer></v-spacer>\r\n              <v-col cols=\"auto\">\r\n                <v-btn density=\"default\" icon=\"mdi-comment\" size=\"32\" color=\"light-blue lighten-5\"></v-btn>\r\n              </v-col>\r\n              <v-col cols=\"auto\">\r\n                <v-btn density=\"default\" icon=\"mdi-bookmark\" size=\"32\" color=\"light-blue lighten-5\"></v-btn>\r\n              </v-col>\r\n            </v-card-actions>\r\n          </v-card>\r\n        </v-col>\r\n    </v-container>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport PostView from \"@/views/PostView.vue\";\r\nimport { ref, onMounted } from \"vue\";\r\nimport axios from \"axios\";\r\n\r\nconst posts = ref([]);\r\n\r\nconst fetchDataFromDatabase = async () => {\r\n  try {\r\n    const response = await axios.get(\"http://127.0.0.1:8080/post\");\r\n    posts.value = response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching data from the database:\", error);\r\n  }\r\n};\r\n\r\nconst formatDate = (dateString) => {\r\n  if (!dateString) return \"Invalid Date\";\r\n\r\n  const date = new Date(dateString);\r\n\r\n  if (isNaN(date.getTime())) return \"Invalid Date\";\r\n\r\n  const options = {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n    hour: \"numeric\",\r\n    minute: \"numeric\",\r\n    second: \"numeric\"\r\n  };\r\n\r\n  return date.toLocaleDateString('en-US', options);\r\n};\r\n\r\nonMounted(() => {\r\n  fetchDataFromDatabase().then(() => {\r\n    // posts dizisini created_at özelliğine göre sırala\r\n    posts.value.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\r\n  });\r\n});\r\n\r\n</script>\r\n"],"mappings":"AA+BA,OAAOA,QAAQ,MAAM,sBAAsB;AAC3C,SAASC,GAAG,EAAEC,SAAS,QAAQ,KAAK;AACpC,OAAOC,KAAK,MAAM,OAAO;;;;;;;IAEzB,MAAMC,KAAK,GAAGH,GAAG,CAAC,EAAE,CAAC;IAErB,MAAMI,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,4BAA4B,CAAC;QAC9DH,KAAK,CAACI,KAAK,GAAGF,QAAQ,CAACG,IAAI;MAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAChE;IACF,CAAC;IAED,MAAME,UAAU,GAAIC,UAAU,IAAK;MACjC,IAAI,CAACA,UAAU,EAAE,OAAO,cAAc;MAEtC,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;MAEjC,IAAIG,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,cAAc;MAEhD,MAAMC,OAAO,GAAG;QACdC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE,MAAM;QACbC,GAAG,EAAE,SAAS;QACdC,IAAI,EAAE,SAAS;QACfC,MAAM,EAAE,SAAS;QACjBC,MAAM,EAAE;MACV,CAAC;MAED,OAAOV,IAAI,CAACW,kBAAkB,CAAC,OAAO,EAAEP,OAAO,CAAC;IAClD,CAAC;IAEDhB,SAAS,CAAC,MAAM;MACdG,qBAAqB,CAAC,CAAC,CAACqB,IAAI,CAAC,MAAM;QACjC;QACAtB,KAAK,CAACI,KAAK,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAId,IAAI,CAACc,CAAC,CAACC,UAAU,CAAC,GAAG,IAAIf,IAAI,CAACa,CAAC,CAACE,UAAU,CAAC,CAAC;MAC7E,CAAC,CAAC;IACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}