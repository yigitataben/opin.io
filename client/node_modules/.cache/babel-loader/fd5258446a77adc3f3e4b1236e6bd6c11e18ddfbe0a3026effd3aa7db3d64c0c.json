{"ast":null,"code":"export default {\n  data: () => ({\n    visible: false,\n    email: '',\n    rules: {\n      required: value => !!value || 'Required.',\n      name: value => /^[a-zA-Z\\s]+$/.test(value) || 'Invalid character.',\n      email: value => {\n        const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return pattern.test(value) || 'Invalid e-mail.';\n      },\n      length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\n      password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) || 'Password must contain an upper case letter, a numeric character, and a special character'\n    }\n  }),\n  methods: {\n    async submitForm() {\n      const userData = {\n        UserName: this.userName,\n        FirstName: this.firstName,\n        LastName: this.lastName,\n        EmailAddress: this.email,\n        UserPassword: this.password\n      };\n      try {\n        const response = await fetch('/api/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(userData)\n        });\n        const data = await response.json();\n        if (data.success) {\n          // Başarılı kayıt mesajı veya başka bir işlem\n        } else {\n          // Hata mesajı\n        }\n      } catch (error) {\n        console.error('Error:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","visible","email","rules","required","value","name","test","pattern","length","len","v","password","match","methods","submitForm","userData","UserName","userName","FirstName","firstName","LastName","lastName","EmailAddress","UserPassword","response","fetch","method","headers","body","JSON","stringify","json","success","error","console"],"sources":["C:\\Users\\yigit\\OneDrive\\Workspace\\opin.io\\client\\src\\views\\template\\SignupView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <v-img\r\n        class=\"mx-auto my-6\"\r\n        max-width=\"228\"\r\n    ></v-img>\r\n\r\n    <v-card\r\n        class=\"mx-auto pa-12 pb-8\"\r\n        elevation=\"8\"\r\n        max-width=\"448\"\r\n        rounded=\"lg\"\r\n    >\r\n      <div class=\"text-subtitle-1 text-medium-emphasis\">Personal Informations</div>\r\n\r\n      <v-text-field\r\n          :rules=\"[rules.required, rules.name]\"\r\n          density=\"compact\"\r\n          placeholder=\"First Name\"\r\n          prepend-inner-icon=\"mdi-card-account-details-outline\"\r\n          variant=\"outlined\"\r\n      ></v-text-field>\r\n\r\n      <v-text-field\r\n          :rules=\"[rules.required, rules.name]\"\r\n          density=\"compact\"\r\n          placeholder=\"Last Name\"\r\n          prepend-inner-icon=\"mdi-card-account-details-outline\"\r\n          variant=\"outlined\"\r\n      ></v-text-field>\r\n\r\n      <v-text-field\r\n          :rules=\"[rules.required, rules.name]\"\r\n          density=\"compact\"\r\n          placeholder=\"Username\"\r\n          prepend-inner-icon=\"mdi-at\"\r\n          variant=\"outlined\"\r\n      ></v-text-field>\r\n\r\n      <v-text-field\r\n          v-model=\"email\"\r\n          :rules=\"[rules.required, rules.email]\"\r\n          density=\"compact\"\r\n          placeholder=\"E-mail Adress\"\r\n          prepend-inner-icon=\"mdi-email-outline\"\r\n          variant=\"outlined\"\r\n      ></v-text-field>\r\n\r\n      <div class=\"text-subtitle-1 text-medium-emphasis d-flex align-center justify-space-between\">\r\n        Password\r\n      </div>\r\n\r\n      <v-text-field\r\n          :rules=\"[rules.password, rules.length(6)]\"\r\n          :append-inner-icon=\"visible ? 'mdi-eye-off' : 'mdi-eye'\"\r\n          :type=\"visible ? 'text' : 'password'\"\r\n          density=\"compact\"\r\n          placeholder=\"Enter your password.\"\r\n          prepend-inner-icon=\"mdi-lock-outline\"\r\n          variant=\"outlined\"\r\n          @click:append-inner=\"visible = !visible\"\r\n      ></v-text-field>\r\n\r\n      <v-card\r\n          class=\"mb-12\"\r\n          color=\"surface-variant\"\r\n          variant=\"tonal\"\r\n      >\r\n\r\n      </v-card>\r\n\r\n      <v-btn\r\n          block\r\n          class=\"mb-8\"\r\n          color=\"blue\"\r\n          size=\"large\"\r\n          variant=\"tonal\"\r\n          @click=\"signup\"\r\n      >\r\n        Sign Up\r\n      </v-btn>\r\n    </v-card>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data: () => ({\r\n    visible: false,\r\n      email: '',\r\n      rules: {\r\n        required: value => !!value || 'Required.',\r\n        name: value => /^[a-zA-Z\\s]+$/.test(value) || 'Invalid character.',\r\n        email: value => {\r\n          const pattern = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n          return pattern.test(value) || 'Invalid e-mail.'\r\n      },\r\n        length: len => v => (v || '').length >= len || `Invalid character length, required ${len}`,\r\n        password: v => !!(v || '').match(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*(_|[^\\w])).+$/) ||\r\n            'Password must contain an upper case letter, a numeric character, and a special character',\r\n    },\r\n  }),\r\n  methods: {\r\n    async submitForm() {\r\n      const userData = {\r\n        UserName: this.userName,\r\n        FirstName: this.firstName,\r\n        LastName: this.lastName,\r\n        EmailAddress: this.email,\r\n        UserPassword: this.password\r\n      };\r\n\r\n      try {\r\n        const response = await fetch('/api/signup', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(userData)\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n          // Başarılı kayıt mesajı veya başka bir işlem\r\n        } else {\r\n          // Hata mesajı\r\n        }\r\n      } catch (error) {\r\n        console.error('Error:', error);\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>"],"mappings":"AAqFA,eAAe;EACbA,IAAI,EAAEA,CAAA,MAAO;IACXC,OAAO,EAAE,KAAK;IACZC,KAAK,EAAE,EAAE;IACTC,KAAK,EAAE;MACLC,QAAQ,EAAEC,KAAI,IAAK,CAAC,CAACA,KAAI,IAAK,WAAW;MACzCC,IAAI,EAAED,KAAI,IAAK,eAAe,CAACE,IAAI,CAACF,KAAK,KAAK,oBAAoB;MAClEH,KAAK,EAAEG,KAAI,IAAK;QACd,MAAMG,OAAM,GAAI,sJAAqJ;QACrK,OAAOA,OAAO,CAACD,IAAI,CAACF,KAAK,KAAK,iBAAgB;MAClD,CAAC;MACCI,MAAM,EAAEC,GAAE,IAAKC,CAAA,IAAK,CAACA,CAAA,IAAK,EAAE,EAAEF,MAAK,IAAKC,GAAE,IAAM,sCAAqCA,GAAI,EAAC;MAC1FE,QAAQ,EAAED,CAAA,IAAK,CAAC,CAAC,CAACA,CAAA,IAAK,EAAE,EAAEE,KAAK,CAAC,mDAAmD,KAChF;IACR;EACF,CAAC,CAAC;EACFC,OAAO,EAAE;IACP,MAAMC,UAAUA,CAAA,EAAG;MACjB,MAAMC,QAAO,GAAI;QACfC,QAAQ,EAAE,IAAI,CAACC,QAAQ;QACvBC,SAAS,EAAE,IAAI,CAACC,SAAS;QACzBC,QAAQ,EAAE,IAAI,CAACC,QAAQ;QACvBC,YAAY,EAAE,IAAI,CAACrB,KAAK;QACxBsB,YAAY,EAAE,IAAI,CAACZ;MACrB,CAAC;MAED,IAAI;QACF,MAAMa,QAAO,GAAI,MAAMC,KAAK,CAAC,aAAa,EAAE;UAC1CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACf,QAAQ;QAC/B,CAAC,CAAC;QAEF,MAAMhB,IAAG,GAAI,MAAMyB,QAAQ,CAACO,IAAI,CAAC,CAAC;QAElC,IAAIhC,IAAI,CAACiC,OAAO,EAAE;UAChB;QAAA,CACF,MAAO;UACL;QAAA;MAEJ,EAAE,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAChC;IACF;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}